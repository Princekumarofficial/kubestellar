name: goreleaser

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  id-token: write
  packages: write

env:
  REGISTRY: ghcr.io
  CORE_CHART_PATH: ./core-chart

jobs:
  goreleaser:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 0

      - uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5
        with:
          go-version: 1.24

      - name: Delete non-semver tags
        run: 'git tag -d $(git tag -l | grep -v "^v")'

      - name: Set LDFLAGS
        run: echo LDFLAGS="$(make ldflags)" >> $GITHUB_ENV

      - name: Install syft binary executable
        uses: anchore/sbom-action/download-syft@9f7302141466aa6482940f15371237e9d9f4c34a

      - name: Import GPG key
        id: import_gpg
        run: |
          # Create a temporary file with the decoded key
          echo "${{ secrets.PK }}" | base64 -d > /tmp/private.key

          # Check if the file has content
          if [ ! -s /tmp/private.key ]; then
            echo "Error: Decoded GPG key is empty. Check your PK secret."
            exit 1
          fi

          # Import the key with passphrase
          gpg --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" --import /tmp/private.key

          # Configure GPG agent
          mkdir -p ~/.gnupg
          echo "use-agent" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpg-connect-agent RELOADAGENT /bye

          # Export fingerprint for later use
          fingerprint=$(gpg --list-secret-keys --with-colons | awk -F: '/^fpr:/ {print $10; exit}')
          echo "fingerprint=$fingerprint" >> $GITHUB_OUTPUT

          # Clean up
          rm -f /tmp/private.key
        env:
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Run GoReleaser on tag
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552
        with:
          distribution: goreleaser
          version: latest
          args: release --timeout 60m --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: ${{ github.actor }}
          EMAIL: ${{ github.actor}}@users.noreply.github.com
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

      - name: Set up Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Package and push charts
        run: |
          chartVersion=$(echo ${{ github.ref_name }} | cut -c 2-)

          sed -i "s/^KUBESTELLAR_VERSION:.*$/KUBESTELLAR_VERSION: \"${chartVersion}\"/g" ${{ env.CORE_CHART_PATH }}/values.yaml

          helm package ${{ env.CORE_CHART_PATH }} --destination . --version ${chartVersion} --app-version ${chartVersion} --dependency-update
          helm push ./core-chart*.tgz oci://${{ env.REGISTRY }}/kubestellar/kubestellar
